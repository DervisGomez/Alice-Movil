package org.app.alice.modelo;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.app.alice.modelo.Cita;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CITA.
*/
public class CitaDao extends AbstractDao<Cita, Long> {

    public static final String TABLENAME = "CITA";

    /**
     * Properties of entity Cita.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fecha = new Property(1, String.class, "fecha", false, "FECHA");
        public final static Property Descripcion = new Property(2, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Ubicacion = new Property(3, String.class, "ubicacion", false, "UBICACION");
        public final static Property Estatus = new Property(4, Integer.class, "estatus", false, "ESTATUS");
        public final static Property Precio = new Property(5, Double.class, "precio", false, "PRECIO");
        public final static Property Nombre = new Property(6, String.class, "nombre", false, "NOMBRE");
        public final static Property Apellido = new Property(7, String.class, "apellido", false, "APELLIDO");
        public final static Property IdServicioCita = new Property(8, Long.class, "idServicioCita", false, "ID_SERVICIO_CITA");
    };

    private Query<Cita> servicio_CitaQuery;

    public CitaDao(DaoConfig config) {
        super(config);
    }
    
    public CitaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CITA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FECHA' TEXT," + // 1: fecha
                "'DESCRIPCION' TEXT," + // 2: descripcion
                "'UBICACION' TEXT," + // 3: ubicacion
                "'ESTATUS' INTEGER," + // 4: estatus
                "'PRECIO' REAL," + // 5: precio
                "'NOMBRE' TEXT," + // 6: nombre
                "'APELLIDO' TEXT," + // 7: apellido
                "'ID_SERVICIO_CITA' INTEGER);"); // 8: idServicioCita
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CITA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cita entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(2, fecha);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(3, descripcion);
        }
 
        String ubicacion = entity.getUbicacion();
        if (ubicacion != null) {
            stmt.bindString(4, ubicacion);
        }
 
        Integer estatus = entity.getEstatus();
        if (estatus != null) {
            stmt.bindLong(5, estatus);
        }
 
        Double precio = entity.getPrecio();
        if (precio != null) {
            stmt.bindDouble(6, precio);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(7, nombre);
        }
 
        String apellido = entity.getApellido();
        if (apellido != null) {
            stmt.bindString(8, apellido);
        }
 
        Long idServicioCita = entity.getIdServicioCita();
        if (idServicioCita != null) {
            stmt.bindLong(9, idServicioCita);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cita readEntity(Cursor cursor, int offset) {
        Cita entity = new Cita( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fecha
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // descripcion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ubicacion
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // estatus
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // precio
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nombre
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // apellido
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // idServicioCita
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cita entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFecha(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescripcion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUbicacion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEstatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPrecio(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setNombre(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setApellido(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIdServicioCita(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cita entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cita entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Cita" to-many relationship of Servicio. */
    public List<Cita> _queryServicio_Cita(Long idServicioCita) {
        synchronized (this) {
            if (servicio_CitaQuery == null) {
                QueryBuilder<Cita> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdServicioCita.eq(null));
                servicio_CitaQuery = queryBuilder.build();
            }
        }
        Query<Cita> query = servicio_CitaQuery.forCurrentThread();
        query.setParameter(0, idServicioCita);
        return query.list();
    }

}
