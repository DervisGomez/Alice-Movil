package org.app.alice.modelo;

import java.util.List;
import org.app.alice.modelo.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table HORARIO.
 */
public class Horario {

    private Long id;
    private Integer estatus;
    private Long idServicioHorario;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HorarioDao myDao;

    private List<Turno> Turno;
    private List<Alerta> Alerta;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Horario() {
    }

    public Horario(Long id) {
        this.id = id;
    }

    public Horario(Long id, Integer estatus, Long idServicioHorario) {
        this.id = id;
        this.estatus = estatus;
        this.idServicioHorario = idServicioHorario;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHorarioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getEstatus() {
        return estatus;
    }

    public void setEstatus(Integer estatus) {
        this.estatus = estatus;
    }

    public Long getIdServicioHorario() {
        return idServicioHorario;
    }

    public void setIdServicioHorario(Long idServicioHorario) {
        this.idServicioHorario = idServicioHorario;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Turno> getTurno() {
        if (Turno == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TurnoDao targetDao = daoSession.getTurnoDao();
            List<Turno> TurnoNew = targetDao._queryHorario_Turno(id);
            synchronized (this) {
                if(Turno == null) {
                    Turno = TurnoNew;
                }
            }
        }
        return Turno;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTurno() {
        Turno = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Alerta> getAlerta() {
        if (Alerta == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AlertaDao targetDao = daoSession.getAlertaDao();
            List<Alerta> AlertaNew = targetDao._queryHorario_Alerta(id);
            synchronized (this) {
                if(Alerta == null) {
                    Alerta = AlertaNew;
                }
            }
        }
        return Alerta;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAlerta() {
        Alerta = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
