package org.app.alice.modelo;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.app.alice.modelo.Horario;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HORARIO.
*/
public class HorarioDao extends AbstractDao<Horario, Long> {

    public static final String TABLENAME = "HORARIO";

    /**
     * Properties of entity Horario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Estatus = new Property(1, Integer.class, "estatus", false, "ESTATUS");
        public final static Property IdServicioHorario = new Property(2, Long.class, "idServicioHorario", false, "ID_SERVICIO_HORARIO");
    };

    private DaoSession daoSession;

    private Query<Horario> servicio_HorarioQuery;

    public HorarioDao(DaoConfig config) {
        super(config);
    }
    
    public HorarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HORARIO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ESTATUS' INTEGER," + // 1: estatus
                "'ID_SERVICIO_HORARIO' INTEGER);"); // 2: idServicioHorario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HORARIO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Horario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer estatus = entity.getEstatus();
        if (estatus != null) {
            stmt.bindLong(2, estatus);
        }
 
        Long idServicioHorario = entity.getIdServicioHorario();
        if (idServicioHorario != null) {
            stmt.bindLong(3, idServicioHorario);
        }
    }

    @Override
    protected void attachEntity(Horario entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Horario readEntity(Cursor cursor, int offset) {
        Horario entity = new Horario( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // estatus
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // idServicioHorario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Horario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEstatus(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIdServicioHorario(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Horario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Horario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Horario" to-many relationship of Servicio. */
    public List<Horario> _queryServicio_Horario(Long idServicioHorario) {
        synchronized (this) {
            if (servicio_HorarioQuery == null) {
                QueryBuilder<Horario> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdServicioHorario.eq(null));
                servicio_HorarioQuery = queryBuilder.build();
            }
        }
        Query<Horario> query = servicio_HorarioQuery.forCurrentThread();
        query.setParameter(0, idServicioHorario);
        return query.list();
    }

}
