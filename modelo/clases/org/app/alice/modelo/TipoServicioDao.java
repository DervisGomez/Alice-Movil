package org.app.alice.modelo;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.app.alice.modelo.TipoServicio;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TIPO_SERVICIO.
*/
public class TipoServicioDao extends AbstractDao<TipoServicio, Long> {

    public static final String TABLENAME = "TIPO_SERVICIO";

    /**
     * Properties of entity TipoServicio.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Codigo = new Property(1, Integer.class, "codigo", false, "CODIGO");
        public final static Property Descripcion = new Property(2, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Texto = new Property(3, String.class, "texto", false, "TEXTO");
        public final static Property Estatus = new Property(4, Integer.class, "estatus", false, "ESTATUS");
        public final static Property Foto = new Property(5, String.class, "foto", false, "FOTO");
        public final static Property IdCategoriaServicio = new Property(6, Long.class, "idCategoriaServicio", false, "ID_CATEGORIA_SERVICIO");
    };

    private DaoSession daoSession;

    private Query<TipoServicio> categoriaServicio_TipoServicioQuery;

    public TipoServicioDao(DaoConfig config) {
        super(config);
    }
    
    public TipoServicioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TIPO_SERVICIO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CODIGO' INTEGER," + // 1: codigo
                "'DESCRIPCION' TEXT," + // 2: descripcion
                "'TEXTO' TEXT," + // 3: texto
                "'ESTATUS' INTEGER," + // 4: estatus
                "'FOTO' TEXT," + // 5: foto
                "'ID_CATEGORIA_SERVICIO' INTEGER);"); // 6: idCategoriaServicio
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TIPO_SERVICIO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TipoServicio entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindLong(2, codigo);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(3, descripcion);
        }
 
        String texto = entity.getTexto();
        if (texto != null) {
            stmt.bindString(4, texto);
        }
 
        Integer estatus = entity.getEstatus();
        if (estatus != null) {
            stmt.bindLong(5, estatus);
        }
 
        String foto = entity.getFoto();
        if (foto != null) {
            stmt.bindString(6, foto);
        }
 
        Long idCategoriaServicio = entity.getIdCategoriaServicio();
        if (idCategoriaServicio != null) {
            stmt.bindLong(7, idCategoriaServicio);
        }
    }

    @Override
    protected void attachEntity(TipoServicio entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TipoServicio readEntity(Cursor cursor, int offset) {
        TipoServicio entity = new TipoServicio( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // codigo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // descripcion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // texto
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // estatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // foto
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // idCategoriaServicio
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TipoServicio entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodigo(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDescripcion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTexto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEstatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFoto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIdCategoriaServicio(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TipoServicio entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TipoServicio entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "TipoServicio" to-many relationship of CategoriaServicio. */
    public List<TipoServicio> _queryCategoriaServicio_TipoServicio(Long idCategoriaServicio) {
        synchronized (this) {
            if (categoriaServicio_TipoServicioQuery == null) {
                QueryBuilder<TipoServicio> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdCategoriaServicio.eq(null));
                categoriaServicio_TipoServicioQuery = queryBuilder.build();
            }
        }
        Query<TipoServicio> query = categoriaServicio_TipoServicioQuery.forCurrentThread();
        query.setParameter(0, idCategoriaServicio);
        return query.list();
    }

}
