package org.app.alice.modelo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.app.alice.modelo.Noticia;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTICIA.
*/
public class NoticiaDao extends AbstractDao<Noticia, Long> {

    public static final String TABLENAME = "NOTICIA";

    /**
     * Properties of entity Noticia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Codigo = new Property(1, Integer.class, "codigo", false, "CODIGO");
        public final static Property Titulo = new Property(2, String.class, "titulo", false, "TITULO");
        public final static Property Descripcion = new Property(3, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Estatus = new Property(4, Integer.class, "estatus", false, "ESTATUS");
        public final static Property TipoNoticia = new Property(5, String.class, "tipoNoticia", false, "TIPO_NOTICIA");
        public final static Property Contenido = new Property(6, String.class, "contenido", false, "CONTENIDO");
        public final static Property Fecha = new Property(7, String.class, "fecha", false, "FECHA");
    };


    public NoticiaDao(DaoConfig config) {
        super(config);
    }
    
    public NoticiaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTICIA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CODIGO' INTEGER," + // 1: codigo
                "'TITULO' TEXT," + // 2: titulo
                "'DESCRIPCION' TEXT," + // 3: descripcion
                "'ESTATUS' INTEGER," + // 4: estatus
                "'TIPO_NOTICIA' TEXT," + // 5: tipoNoticia
                "'CONTENIDO' TEXT," + // 6: contenido
                "'FECHA' TEXT);"); // 7: fecha
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTICIA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Noticia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindLong(2, codigo);
        }
 
        String titulo = entity.getTitulo();
        if (titulo != null) {
            stmt.bindString(3, titulo);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(4, descripcion);
        }
 
        Integer estatus = entity.getEstatus();
        if (estatus != null) {
            stmt.bindLong(5, estatus);
        }
 
        String tipoNoticia = entity.getTipoNoticia();
        if (tipoNoticia != null) {
            stmt.bindString(6, tipoNoticia);
        }
 
        String contenido = entity.getContenido();
        if (contenido != null) {
            stmt.bindString(7, contenido);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(8, fecha);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Noticia readEntity(Cursor cursor, int offset) {
        Noticia entity = new Noticia( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // codigo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // titulo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // descripcion
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // estatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tipoNoticia
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contenido
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // fecha
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Noticia entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodigo(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTitulo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescripcion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEstatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTipoNoticia(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContenido(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFecha(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Noticia entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Noticia entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
