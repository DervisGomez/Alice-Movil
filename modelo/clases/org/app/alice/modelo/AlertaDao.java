package org.app.alice.modelo;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.app.alice.modelo.Alerta;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ALERTA.
*/
public class AlertaDao extends AbstractDao<Alerta, Long> {

    public static final String TABLENAME = "ALERTA";

    /**
     * Properties of entity Alerta.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Descripcion = new Property(1, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Estatus = new Property(2, Integer.class, "estatus", false, "ESTATUS");
        public final static Property Tipo_notificacion_id = new Property(3, Integer.class, "tipo_notificacion_id", false, "TIPO_NOTIFICACION_ID");
        public final static Property Mensaje = new Property(4, String.class, "mensaje", false, "MENSAJE");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property Fecha = new Property(6, String.class, "fecha", false, "FECHA");
        public final static Property Entidad_id = new Property(7, Long.class, "entidad_id", false, "ENTIDAD_ID");
        public final static Property IdUsuarioAlerta = new Property(8, Long.class, "idUsuarioAlerta", false, "ID_USUARIO_ALERTA");
    };

    private Query<Alerta> horario_AlertaQuery;

    public AlertaDao(DaoConfig config) {
        super(config);
    }
    
    public AlertaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ALERTA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DESCRIPCION' TEXT," + // 1: descripcion
                "'ESTATUS' INTEGER," + // 2: estatus
                "'TIPO_NOTIFICACION_ID' INTEGER," + // 3: tipo_notificacion_id
                "'MENSAJE' TEXT," + // 4: mensaje
                "'URL' TEXT," + // 5: url
                "'FECHA' TEXT," + // 6: fecha
                "'ENTIDAD_ID' INTEGER," + // 7: entidad_id
                "'ID_USUARIO_ALERTA' INTEGER);"); // 8: idUsuarioAlerta
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ALERTA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Alerta entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(2, descripcion);
        }
 
        Integer estatus = entity.getEstatus();
        if (estatus != null) {
            stmt.bindLong(3, estatus);
        }
 
        Integer tipo_notificacion_id = entity.getTipo_notificacion_id();
        if (tipo_notificacion_id != null) {
            stmt.bindLong(4, tipo_notificacion_id);
        }
 
        String mensaje = entity.getMensaje();
        if (mensaje != null) {
            stmt.bindString(5, mensaje);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(7, fecha);
        }
 
        Long entidad_id = entity.getEntidad_id();
        if (entidad_id != null) {
            stmt.bindLong(8, entidad_id);
        }
 
        Long idUsuarioAlerta = entity.getIdUsuarioAlerta();
        if (idUsuarioAlerta != null) {
            stmt.bindLong(9, idUsuarioAlerta);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Alerta readEntity(Cursor cursor, int offset) {
        Alerta entity = new Alerta( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // descripcion
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // estatus
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // tipo_notificacion_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mensaje
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fecha
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // entidad_id
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // idUsuarioAlerta
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Alerta entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescripcion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEstatus(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTipo_notificacion_id(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMensaje(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFecha(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEntidad_id(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setIdUsuarioAlerta(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Alerta entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Alerta entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Alerta" to-many relationship of Horario. */
    public List<Alerta> _queryHorario_Alerta(Long idUsuarioAlerta) {
        synchronized (this) {
            if (horario_AlertaQuery == null) {
                QueryBuilder<Alerta> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdUsuarioAlerta.eq(null));
                horario_AlertaQuery = queryBuilder.build();
            }
        }
        Query<Alerta> query = horario_AlertaQuery.forCurrentThread();
        query.setParameter(0, idUsuarioAlerta);
        return query.list();
    }

}
