package org.app.alice.modelo;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.app.alice.modelo.Turno;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TURNO.
*/
public class TurnoDao extends AbstractDao<Turno, Long> {

    public static final String TABLENAME = "TURNO";

    /**
     * Properties of entity Turno.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Inicio = new Property(1, String.class, "inicio", false, "INICIO");
        public final static Property Fin = new Property(2, String.class, "fin", false, "FIN");
        public final static Property Tipo = new Property(3, Integer.class, "tipo", false, "TIPO");
        public final static Property Dia = new Property(4, Integer.class, "dia", false, "DIA");
        public final static Property Estatus = new Property(5, Integer.class, "estatus", false, "ESTATUS");
        public final static Property IdHorarioTurno = new Property(6, Long.class, "idHorarioTurno", false, "ID_HORARIO_TURNO");
    };

    private Query<Turno> horario_TurnoQuery;

    public TurnoDao(DaoConfig config) {
        super(config);
    }
    
    public TurnoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TURNO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'INICIO' TEXT," + // 1: inicio
                "'FIN' TEXT," + // 2: fin
                "'TIPO' INTEGER," + // 3: tipo
                "'DIA' INTEGER," + // 4: dia
                "'ESTATUS' INTEGER," + // 5: estatus
                "'ID_HORARIO_TURNO' INTEGER);"); // 6: idHorarioTurno
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TURNO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Turno entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String inicio = entity.getInicio();
        if (inicio != null) {
            stmt.bindString(2, inicio);
        }
 
        String fin = entity.getFin();
        if (fin != null) {
            stmt.bindString(3, fin);
        }
 
        Integer tipo = entity.getTipo();
        if (tipo != null) {
            stmt.bindLong(4, tipo);
        }
 
        Integer dia = entity.getDia();
        if (dia != null) {
            stmt.bindLong(5, dia);
        }
 
        Integer estatus = entity.getEstatus();
        if (estatus != null) {
            stmt.bindLong(6, estatus);
        }
 
        Long idHorarioTurno = entity.getIdHorarioTurno();
        if (idHorarioTurno != null) {
            stmt.bindLong(7, idHorarioTurno);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Turno readEntity(Cursor cursor, int offset) {
        Turno entity = new Turno( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // inicio
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fin
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // tipo
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // dia
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // estatus
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // idHorarioTurno
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Turno entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInicio(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTipo(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDia(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setEstatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIdHorarioTurno(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Turno entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Turno entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Turno" to-many relationship of Horario. */
    public List<Turno> _queryHorario_Turno(Long idHorarioTurno) {
        synchronized (this) {
            if (horario_TurnoQuery == null) {
                QueryBuilder<Turno> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdHorarioTurno.eq(null));
                horario_TurnoQuery = queryBuilder.build();
            }
        }
        Query<Turno> query = horario_TurnoQuery.forCurrentThread();
        query.setParameter(0, idHorarioTurno);
        return query.list();
    }

}
