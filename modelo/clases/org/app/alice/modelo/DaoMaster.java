package org.app.alice.modelo;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import org.app.alice.modelo.UsuarioDao;
import org.app.alice.modelo.EventoDao;
import org.app.alice.modelo.NoticiaDao;
import org.app.alice.modelo.CategoriaServicioDao;
import org.app.alice.modelo.TipoServicioDao;
import org.app.alice.modelo.ServicioDao;
import org.app.alice.modelo.HorarioDao;
import org.app.alice.modelo.TurnoDao;
import org.app.alice.modelo.AlertaDao;
import org.app.alice.modelo.CitaDao;
import org.app.alice.modelo.TipoOpinioDao;
import org.app.alice.modelo.CriterioDao;
import org.app.alice.modelo.PreguntaDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        UsuarioDao.createTable(db, ifNotExists);
        EventoDao.createTable(db, ifNotExists);
        NoticiaDao.createTable(db, ifNotExists);
        CategoriaServicioDao.createTable(db, ifNotExists);
        TipoServicioDao.createTable(db, ifNotExists);
        ServicioDao.createTable(db, ifNotExists);
        HorarioDao.createTable(db, ifNotExists);
        TurnoDao.createTable(db, ifNotExists);
        AlertaDao.createTable(db, ifNotExists);
        CitaDao.createTable(db, ifNotExists);
        TipoOpinioDao.createTable(db, ifNotExists);
        CriterioDao.createTable(db, ifNotExists);
        PreguntaDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        UsuarioDao.dropTable(db, ifExists);
        EventoDao.dropTable(db, ifExists);
        NoticiaDao.dropTable(db, ifExists);
        CategoriaServicioDao.dropTable(db, ifExists);
        TipoServicioDao.dropTable(db, ifExists);
        ServicioDao.dropTable(db, ifExists);
        HorarioDao.dropTable(db, ifExists);
        TurnoDao.dropTable(db, ifExists);
        AlertaDao.dropTable(db, ifExists);
        CitaDao.dropTable(db, ifExists);
        TipoOpinioDao.dropTable(db, ifExists);
        CriterioDao.dropTable(db, ifExists);
        PreguntaDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(UsuarioDao.class);
        registerDaoClass(EventoDao.class);
        registerDaoClass(NoticiaDao.class);
        registerDaoClass(CategoriaServicioDao.class);
        registerDaoClass(TipoServicioDao.class);
        registerDaoClass(ServicioDao.class);
        registerDaoClass(HorarioDao.class);
        registerDaoClass(TurnoDao.class);
        registerDaoClass(AlertaDao.class);
        registerDaoClass(CitaDao.class);
        registerDaoClass(TipoOpinioDao.class);
        registerDaoClass(CriterioDao.class);
        registerDaoClass(PreguntaDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
